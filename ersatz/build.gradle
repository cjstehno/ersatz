plugins {
    id 'java-library'
    id "com.github.hierynomus.license" version '0.16.1'
    id 'maven-publish'
    id 'com.github.ben-manes.versions' version '0.41.0'
    id "com.github.johnrengelman.shadow" version '7.1.2'
    id 'jacoco'
    id 'signing'
}

group = rootProject.group
version = rootProject.version

sourceCompatibility = 17
targetCompatibility = 17

repositories {
    mavenCentral()
}

dependencies {
    // production
    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"

    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

    api 'io.undertow:undertow-core:2.2.14.Final'
    api 'javax.servlet:javax.servlet-api:4.0.1'
    api 'org.hamcrest:hamcrest-library:2.2'

    implementation 'javax.activation:activation:1.1.1'
    implementation 'org.slf4j:slf4j-api:1.7.33'
    implementation 'commons-fileupload:commons-fileupload:1.4'

    // this is required for the test extension
    compileOnly "org.junit.jupiter:junit-jupiter-api:$junitVersion"

    // testing

    testRuntimeOnly 'ch.qos.logback:logback-classic:1.2.10'
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testImplementation 'org.mockito:mockito-junit-jupiter:4.2.0'

    testImplementation 'org.awaitility:awaitility:4.1.1'
    testImplementation 'com.squareup.okhttp3:okhttp:4.9.3'
    testImplementation  'com.fasterxml.jackson.core:jackson-databind:2.13.1'
}

test {
    useJUnitPlatform()
    maxParallelForks = Math.min(Runtime.runtime.availableProcessors(), 8)
}

jacocoTestReport {
    dependsOn test
}

license {
    header = file('../config/license_header.txt')

    ignoreFailures false

    ext.year = Calendar.instance.get(Calendar.YEAR)

    excludes(['**/*.txt', '**/*.dtd', '**/*.xml', '**/*.ent', '**/*.jks', '**/*.jpg'])
}

task sourcesJar(type: Jar) {
    description = 'Creates sources jar.'
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    description = 'Creates API documentation jar.'
    archiveClassifier.set('javadoc')
    from javadoc
}

shadowJar {
    archiveClassifier.set('safe')
    dependencies {
        exclude(dependency('javax.activation:activation:.*'))
        exclude(dependency('org.slf4j:slf4j-api:.*'))
        exclude(dependency('org.hamcrest::.*'))
        exclude(dependency('org.wildfly.client::.*'))
    }

    mergeServiceFiles()

    relocate 'io.undertow', 'ersatz.undertow'
    relocate 'org.jboss', 'ersatz.jboss'
    relocate 'org.xnio', 'ersatz.xnio'
    relocate 'javax.servlet', 'ersatz.servlet'
    relocate 'org.apache.commons.fileupload', 'ersatz.fileupload'
    relocate 'org.apache.commons.io', 'ersatz.io'
    relocate 'org.wildfly.common', 'ersatz.wildfly.common'
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
    archives shadowJar
}

publishing {
    publications {
        ersatz(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId project.group
            artifactId 'ersatz'
            version project.version
            pom.withXml {
                def root = asNode()

                // remove test dependencies
                root.dependencies.removeAll { dep -> dep.scope == 'test'}

                root.appendNode('description', 'Mock server library for testing HTTP clients.')
                root.appendNode('name', 'ersatz')
                root.appendNode('url', 'https://cjstehno.github.io/ersatz')

                def licenseNode = root.appendNode('licenses').appendNode('license')
                licenseNode.appendNode('name', 'The Apache Software License, Version 2.0')
                licenseNode.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                licenseNode.appendNode('distribution', 'repo')

                def developersNode = root.appendNode('developers').appendNode('developer')
                developersNode.appendNode('id', 'cjstehno')
                developersNode.appendNode('name', 'Christopher J Stehno')
                developersNode.appendNode('email', 'chris.stehno@gmail.com')

                def scmNode = root.appendNode('scm')
                scmNode.appendNode('connection', 'scm:git:git@github.com:cjstehno/ersatz.git')
                scmNode.appendNode('developerConnection', 'scm:git:git@github.com:cjstehno/ersatz.git')
                scmNode.appendNode('url', 'https://github.com/cjstehno/ersatz')
            }
        }
    }
}


signing {
    useGpgCmd()
    sign publishing.publications.ersatz
}


