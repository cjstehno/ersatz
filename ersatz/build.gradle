plugins {
    id 'java-library'
    id "com.github.hierynomus.license" version '0.16.1'
    id 'maven-publish'
    id 'com.github.ben-manes.versions' version '0.47.0'
    id "com.github.johnrengelman.shadow" version '8.1.1'
    id 'jacoco'
    id 'signing'
    id 'com.adarshr.test-logger' version '3.2.0'
    id "com.diffplug.spotless" version "6.20.0"
}

group = rootProject.group
version = rootProject.version

sourceCompatibility = 17
targetCompatibility = 17

repositories {
    mavenCentral()
}

dependencies {
    // production
    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"

    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

    api 'io.undertow:undertow-core:2.3.7.Final'
    api 'javax.servlet:javax.servlet-api:4.0.1'
    api 'org.hamcrest:hamcrest-library:2.2'

    implementation 'javax.activation:activation:1.1.1'
    implementation 'org.slf4j:slf4j-api:2.0.7'
    implementation 'commons-fileupload:commons-fileupload:1.5'
    implementation 'commons-io:commons-io:2.13.0'

    // this is required for the forwarding
    api 'com.squareup.okhttp3:okhttp:4.11.0'

    // this is required for the test extension
    compileOnly "org.junit.jupiter:junit-jupiter-api:$junitVersion"

    // testing

    testImplementation 'io.github.cjstehno:test-things:0.1.0'

    testRuntimeOnly 'ch.qos.logback:logback-classic:1.4.8'
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testImplementation 'org.mockito:mockito-junit-jupiter:5.4.0'

    testImplementation 'org.awaitility:awaitility:4.2.0'
    testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
}

test {
    useJUnitPlatform()
    maxParallelForks = Runtime.runtime.availableProcessors()
}

testlogger {
    theme 'mocha-parallel'
    showExceptions true
    showStackTraces true
    showFullStackTraces false
    showCauses true
    slowThreshold 2000
    showSummary true
    showSimpleNames false
    showPassed false
    showSkipped true
    showFailed true
    showOnlySlow false
    showStandardStreams false
    showPassedStandardStreams true
    showSkippedStandardStreams true
    showFailedStandardStreams true
    logLevel 'lifecycle'
}

jacocoTestReport {
    dependsOn test
}

license {
    header = file('../config/license_header.txt')

    ignoreFailures false

    ext.year = Calendar.instance.get(Calendar.YEAR)

    excludes(['**/*.txt', '**/*.dtd', '**/*.xml', '**/*.ent', '**/*.jks', '**/*.jpg'])
}

task sourcesJar(type: Jar) {
    description = 'Creates sources jar.'
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    description = 'Creates API documentation jar.'
    archiveClassifier.set('javadoc')
    from javadoc
}

shadowJar {
    archiveClassifier.set('safe')

    dependencies {
        exclude(dependency('javax.activation:activation:.*'))
        exclude(dependency('org.slf4j:slf4j-api:.*'))
        exclude(dependency('org.hamcrest::.*'))
        exclude(dependency('org.wildfly.client::.*'))
    }

    mergeServiceFiles()

    relocate 'io.undertow', 'ersatz.undertow'
    relocate 'org.jboss', 'ersatz.jboss'
    relocate 'org.xnio', 'ersatz.xnio'
    relocate 'javax.servlet', 'ersatz.servlet'
    relocate 'org.apache.commons.fileupload', 'ersatz.fileupload'
    relocate 'org.apache.commons.io', 'ersatz.io'
    relocate 'org.wildfly.common', 'ersatz.wildfly.common'
    relocate 'okhttp3', 'ersatz.okhttp3'
    relocate 'okio', 'ersatz.okio'
    relocate 'kotlin', 'ersatz.kotlin'
    relocate 'org.intellij', 'ersatz.intellij'
    relocate 'org.jetbrains', 'ersatz.jetbrains'
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
    archives shadowJar
}

publishing {
    publications {
        ersatz(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId project.group
            artifactId 'ersatz'
            version project.version
            pom.withXml {
                def root = asNode()

                // remove test dependencies
                root.dependencies.removeAll { dep -> dep.scope == 'test'}

                root.appendNode('description', 'Mock server library for testing HTTP clients.')
                root.appendNode('name', 'ersatz')
                root.appendNode('url', 'https://cjstehno.github.io/ersatz')

                def licenseNode = root.appendNode('licenses').appendNode('license')
                licenseNode.appendNode('name', 'The Apache Software License, Version 2.0')
                licenseNode.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                licenseNode.appendNode('distribution', 'repo')

                def developersNode = root.appendNode('developers').appendNode('developer')
                developersNode.appendNode('id', 'cjstehno')
                developersNode.appendNode('name', 'Christopher J Stehno')
                developersNode.appendNode('email', 'chris.stehno@gmail.com')

                def scmNode = root.appendNode('scm')
                scmNode.appendNode('connection', 'scm:git:git@github.com:cjstehno/ersatz.git')
                scmNode.appendNode('developerConnection', 'scm:git:git@github.com:cjstehno/ersatz.git')
                scmNode.appendNode('url', 'https://github.com/cjstehno/ersatz')
            }
        }
    }
    repositories {
        maven {
            name = 'OSSRH'
            setUrl('https://s01.oss.sonatype.org/service/local/staging/deploy/maven2')
            credentials {
                username = findProperty('ossrhUser') ?: ''
                password = findProperty('ossrhPass') ?: ''
            }
        }
    }
}

signing {
    useGpgCmd()
    sign publishing.publications.ersatz
}

spotless {
    java {
        importOrder()
        removeUnusedImports()

        cleanthat()

//        prettier()

        formatAnnotations()
    }
}
