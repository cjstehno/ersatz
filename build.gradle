plugins {
    id 'groovy'
    id "com.github.hierynomus.license" version "0.13.1"
    id 'jacoco'
    id 'codenarc'
    id 'maven'
    id 'maven-publish'
    id 'com.github.kt3k.coveralls' version '2.7.1'
    id 'com.jfrog.bintray' version '1.7.3'
    id "org.asciidoctor.convert" version "1.5.3"
    id "com.stehno.gradle.webpreview" version "0.2.0"
    id "com.stehno.gradle.site" version "0.0.3"
}

group = 'com.stehno.ersatz'
version = '1.2.1'

sourceCompatibility = 8
targetCompatibility = 8

repositories {
    jcenter()
}

configurations {
    groovyDoc
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.4.8'
    compile 'io.undertow:undertow-core:1.3.15.Final' // track with boot/grails supported version

    compile 'ch.qos.logback:logback-classic:1.1.7'

    compile 'commons-fileupload:commons-fileupload:1.3.2'

    compile 'javax.servlet:javax.servlet-api:3.1.0'

    compile 'org.hamcrest:hamcrest-library:1.3'
    compile 'junit:junit:4.12'

    testCompile 'com.squareup.okhttp3:okhttp:3.5.0'
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    testCompile 'cglib:cglib-nodep:3.2.4'
    testCompile 'com.burgstaller:okhttp-digest:1.10'
    testCompile 'com.stehno.vanilla:vanilla-core:0.5.1'

    groovyDoc 'org.codehaus.groovy:groovy-groovydoc:2.4.8'
    groovyDoc 'org.codehaus.groovy:groovy-ant:2.4.8'

    codenarc(
        'org.codenarc:CodeNarc:0.26.0',
        'org.codehaus.groovy:groovy-all:2.4.8'
    )
}

codenarc {
    toolVersion = '0.26.0'
}

codenarcMain {
    ignoreFailures false
    configFile file('config/codenarc-main.rules')

    maxPriority1Violations 0
    maxPriority2Violations 5
    maxPriority3Violations 10
}

codenarcTest {
    ignoreFailures true
    configFile file('config/codenarc-test.rules')
}

groovydoc {
    groovyClasspath = configurations.groovyDoc
}

task sourcesJar(type: Jar) {
    description = 'Creates sources jar.'
    classifier = 'sources'
    from project.sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    description = 'Creates API documentation jar.'
    classifier = 'javadoc'
    from groovydoc
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        ersatzPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId project.group
            artifactId 'ersatz'
            version project.version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Mock server library for testing HTTP clients.')
                root.appendNode('name', 'ersatz')
                root.appendNode('url', 'http://stehno.com/ersatz')

                def licenseNode = root.appendNode('licenses').appendNode('license')
                licenseNode.appendNode('name', 'The Apache Software License, Version 2.0')
                licenseNode.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                licenseNode.appendNode('distribution', 'repo')

                def developersNode = root.appendNode('developers').appendNode('developer')
                developersNode.appendNode('id', 'cjstehno')
                developersNode.appendNode('name', 'Christopher J Stehno')
                developersNode.appendNode('email', 'chris@stehno.com')

                def scmNode = root.appendNode('scm')
                scmNode.appendNode('connection', 'scm:git:git@github.com:cjstehno/ersatz.git')
                scmNode.appendNode('developerConnection', 'scm:git:git@github.com:cjstehno/ersatz.git')
                scmNode.appendNode('url', 'https://github.com/cjstehno/ersatz')
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

license {
    header rootProject.file('config/license_header.txt')

    // Toggle ignoreFailures to false to enable license-checking that will fail the build
    ignoreFailures true

    ext.name = 'Christopher J. Stehno'
    ext.year = Calendar.instance.get(Calendar.YEAR)

    excludes(['**/*.txt', '**/*.dtd', '**/*.xml', '**/*.ent', '**/*.jks'])
}

bintray {
    if (project.hasProperty('user') && project.hasProperty('key')) {
        user = project.property('user')
        key = project.property('key')

        publications = ['ersatzPublication']

        pkg {
            repo = 'stehno'
            name = 'ersatz'
            desc = 'Mock server library for testing HTTP clients.'
            licenses = ['Apache-2.0']
            labels = ['groovy']
            websiteUrl = 'http://stehno.com/ersatz'
            issueTrackerUrl = 'https://github.com/cjstehno/ersatz/issues'
            vcsUrl = 'https://github.com/cjstehno/ersatz'
            publicDownloadNumbers = true

            version {
                name = project.version
                vcsTag = "v${project.version}"
                gpg {
                    sign = true
                }
                mavenCentralSync {
                    sync = true
                    user = project.property('sonotypeUser')
                    password = project.property('sonotypePass')
                }
            }
        }
    }
}

asciidoctor {
    options doctype: 'book'

    backends = ['html5']

    attributes 'source-highlighter': 'coderay',
        'coderay-linenums-mode': 'table',
        icon: 'font',
        linkattrs: true,
        encoding: 'utf-8'
}

site {
    versionedFile 'src/docs/asciidoc/index.adoc'
}

tasks.site.dependsOn = ['build', 'groovydoc', 'jacocoTestReport', 'asciidoctor']

task publishSite(type: GradleBuild, group: 'Publishing', description: 'Publishes the documentation web site.', dependsOn: ['site']) {
    buildFile = 'publish.gradle'
    tasks = ['publishGhPages']
}
