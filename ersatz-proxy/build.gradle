plugins {
    id 'groovy'
    id "com.github.hierynomus.license" version '0.15.0'
    id 'jacoco'
    id 'maven'
    id 'maven-publish'
    id 'com.github.kt3k.coveralls' version '2.8.2'
    id 'com.jfrog.bintray' version '1.8.4'
    id "org.asciidoctor.convert" version '1.5.8.1'
    id "com.stehno.gradle.webpreview" version '0.3.0'
    id "com.stehno.gradle.site" version '0.0.3'
    id 'com.github.ben-manes.versions' version '0.25.0'
    id "com.github.johnrengelman.shadow" version '4.0.1'
}

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    jcenter()
}

dependencies {
    compile project(':ersatz-core')

    implementation 'javax.activation:activation:1.1.1'

    implementation "org.codehaus.groovy:groovy-all:$groovyVersion"

    implementation 'io.undertow:undertow-core:2.0.28.Final'

    implementation 'ch.qos.logback:logback-classic:1.1.7'

    // these are used to provide junit helpers in production code
    implementation 'org.hamcrest:hamcrest-library:2.2'
    implementation 'org.awaitility:awaitility:4.0.1'

    testCompile project(':ersatz-junit')
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.5.2"

    testImplementation 'org.mockito:mockito-junit-jupiter:3.1.0'
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.5.2"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.5.2"

    testImplementation 'com.squareup.okhttp3:okhttp:4.2.2'
}

task sourcesJar(type: Jar) {
    description = 'Creates sources jar.'
    classifier = 'sources'
    from project.sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    description = 'Creates API documentation jar.'
    classifier = 'javadoc'
    from javadoc
}

test {
    useJUnitPlatform()
    maxParallelForks = Math.min(Runtime.runtime.availableProcessors(), 8)
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
//    archives shadowJar TODO: restore
}

publishing {
    publications {
        ersatzPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            artifact shadowJar
            groupId project.group
            artifactId 'ersatz-proxy'
            version project.version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Mock server library for testing HTTP clients.')
                root.appendNode('name', 'ersatz-proxy')
                root.appendNode('url', 'http://stehno.com/ersatz')

                def licenseNode = root.appendNode('licenses').appendNode('license')
                licenseNode.appendNode('name', 'The Apache Software License, Version 2.0')
                licenseNode.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                licenseNode.appendNode('distribution', 'repo')

                def developersNode = root.appendNode('developers').appendNode('developer')
                developersNode.appendNode('id', 'cjstehno')
                developersNode.appendNode('name', 'Christopher J Stehno')
                developersNode.appendNode('email', 'chris@stehno.com')

                def scmNode = root.appendNode('scm')
                scmNode.appendNode('connection', 'scm:git:git@github.com:cjstehno/ersatz.git')
                scmNode.appendNode('developerConnection', 'scm:git:git@github.com:cjstehno/ersatz.git')
                scmNode.appendNode('url', 'https://github.com/cjstehno/ersatz')
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

license {
    header = file('../config/license_header.txt')

    ignoreFailures false

    ext.year = Calendar.instance.get(Calendar.YEAR)

    excludes(['**/*.txt', '**/*.dtd', '**/*.xml', '**/*.ent', '**/*.jks', '**/*.jpg'])
}
