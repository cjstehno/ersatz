plugins {
    id 'java-library'
    id "com.github.hierynomus.license" version '0.15.0'
    id 'jacoco'
    id 'maven'
    id 'maven-publish'
    id 'com.github.kt3k.coveralls' version '2.8.2'
    id 'com.jfrog.bintray' version '1.8.4'
    id "org.asciidoctor.convert" version '1.5.8.1'
    id "com.stehno.gradle.webpreview" version '0.3.0'
    id "com.stehno.gradle.site" version '0.0.3'
    id 'com.github.ben-manes.versions' version '0.25.0'
    id "com.github.johnrengelman.shadow" version '4.0.1'
}

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    jcenter()
}

dependencies {
    compile project(':ersatz-core')

    implementation 'ch.qos.logback:logback-classic:1.1.7'

    // these are used to provide junit helpers in production code
    implementation 'org.hamcrest:hamcrest-library:2.2'
    implementation 'junit:junit:4.12'
    implementation "org.junit.jupiter:junit-jupiter-api:5.5.2"

    testImplementation 'org.mockito:mockito-junit-jupiter:3.1.0'
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.5.2"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.5.2"
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.5.2'
}

test {
    useJUnitPlatform()
    maxParallelForks = Math.min(Runtime.runtime.availableProcessors(), 8)
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

license {
    header = file('../config/license_header.txt')

    ignoreFailures false

    ext.year = Calendar.instance.get(Calendar.YEAR)

    excludes(['**/*.txt', '**/*.dtd', '**/*.xml', '**/*.ent', '**/*.jks', '**/*.jpg'])
}
